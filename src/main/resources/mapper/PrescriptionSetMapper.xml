<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="neu.his.dao.PrescriptionSetMapper" >


  <select id="selectWithName" parameterType="Integer" resultMap="InsSet">
    select prescription_set.id as pId, doctor_id, combinatorial_code, combinatorial_name, category, requirement, create_time, name
    from prescription_set left join user
    on prescription_set.doctor_id = user.id
    where (category = '1') or
    (category = '2' and department_id = (SELECT department_id from user where user.id = #{doctorId})) or
	(category = '3' and doctor_id = #{doctorId})
  </select>

  <select id="query" parameterType="neu.his.bean.SetQuery" resultMap="InsSet">
    select prescription_set.id as pId, doctor_id, combinatorial_code, combinatorial_name, category, requirement, create_time, name
    from prescription_set left join user
    on prescription_set.doctor_id = user.id
    where ((category = '1') or
    (category = '2' and department_id = (SELECT department_id from user where user.id = '${doctorId}')) or
    (category = '3' and doctor_id = '${doctorId}'))
    <choose>
      <when test="attribute_name == 'doctor_id'.toString()">
        and user.name like CONCAT('%','${attribute}','%')
      </when>
      <otherwise>
        and ${attribute_name} like CONCAT('%','${attribute}','%')
      </otherwise>
    </choose>
  </select>

  <resultMap id="InsSet" type="neu.his.bean.PrescriptionSet">
    <id property="id" column="pId"/>
    <result property="doctorId" column="doctor_id"/>
    <result property="combinatorialCode" column="combinatorial_code"/>
    <result property="combinatorialName" column="combinatorial_name"/>
    <result property="category" column="category"/>
    <result property="requirement" column="requirement"/>
    <result property="createTime" column="create_time"/>
    <result property="doctorName" column="name"/>
  </resultMap>

  <resultMap id="BaseResultMap" type="neu.his.bean.PrescriptionSet" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="doctor_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="combinatorial_code" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="combinatorial_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="category" jdbcType="CHAR" javaType="java.lang.String" />
      <arg column="requirement" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, doctor_id, combinatorial_code, combinatorial_name, category, requirement, create_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="neu.his.bean.PrescriptionSetExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from prescription_set
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="neu.his.bean.PrescriptionSetExample" >
    delete from prescription_set
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insertSelective" parameterType="neu.his.bean.PrescriptionSet" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into prescription_set
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="doctorId != null" >
        doctor_id,
      </if>
      <if test="combinatorialCode != null" >
        combinatorial_code,
      </if>
      <if test="combinatorialName != null" >
        combinatorial_name,
      </if>
      <if test="category != null" >
        category,
      </if>
      <if test="requirement != null" >
        requirement,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="doctorId != null" >
        #{doctorId,jdbcType=INTEGER},
      </if>
      <if test="combinatorialCode != null" >
        #{combinatorialCode,jdbcType=VARCHAR},
      </if>
      <if test="combinatorialName != null" >
        #{combinatorialName,jdbcType=VARCHAR},
      </if>
      <if test="category != null" >
        #{category,jdbcType=CHAR},
      </if>
      <if test="requirement != null" >
        #{requirement,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="neu.his.bean.PrescriptionSetExample" resultType="java.lang.Integer" >
    select count(*) from prescription_set
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update prescription_set
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.doctorId != null" >
        doctor_id = #{record.doctorId,jdbcType=INTEGER},
      </if>
      <if test="record.combinatorialCode != null" >
        combinatorial_code = #{record.combinatorialCode,jdbcType=VARCHAR},
      </if>
      <if test="record.combinatorialName != null" >
        combinatorial_name = #{record.combinatorialName,jdbcType=VARCHAR},
      </if>
      <if test="record.category != null" >
        category = #{record.category,jdbcType=CHAR},
      </if>
      <if test="record.requirement != null" >
        requirement = #{record.requirement,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update prescription_set
    set id = #{record.id,jdbcType=INTEGER},
      doctor_id = #{record.doctorId,jdbcType=INTEGER},
      combinatorial_code = #{record.combinatorialCode,jdbcType=VARCHAR},
      combinatorial_name = #{record.combinatorialName,jdbcType=VARCHAR},
      category = #{record.category,jdbcType=CHAR},
      requirement = #{record.requirement,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="neu.his.bean.PrescriptionSet" >
    update prescription_set
    <set >
      <if test="doctorId != null" >
        doctor_id = #{doctorId,jdbcType=INTEGER},
      </if>
      <if test="combinatorialCode != null" >
        combinatorial_code = #{combinatorialCode,jdbcType=VARCHAR},
      </if>
      <if test="combinatorialName != null" >
        combinatorial_name = #{combinatorialName,jdbcType=VARCHAR},
      </if>
      <if test="category != null" >
        category = #{category,jdbcType=CHAR},
      </if>
      <if test="requirement != null" >
        requirement = #{requirement,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>