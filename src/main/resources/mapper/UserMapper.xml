<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="neu.his.dao.UserMapper" >


  <select id="queryByRole" parameterType="java.lang.String" resultMap="Users">
SELECT
    USER.id as userId,
    title.id as titleId,
    department.id as departmentId,
    registration_level.id as levelId,
    role.id as roleID,
	name,
	login_name,
	password,
	department_name,
	role_name,
	level_name,
	title_name

FROM
	user LEFT JOIN department
	ON user.department_id = department.id
	LEFT JOIN role
	ON user.role_id = role.id
	LEFT JOIN registration_level
	on user.registration_level_id = registration_level.id
	LEFT JOIN title
	on user.title_id = title.id
WHERE user.role_id != 0 and role_name like CONCAT('%',#{attribute},'%')
</select>
  <select id="queryByTitle" parameterType="java.lang.String" resultMap="Users">
SELECT
    USER.id as userId,
    title.id as titleId,
    department.id as departmentId,
    registration_level.id as levelId,
    role.id as roleID,
	name,
	login_name,
	password,
	department_name,
	role_name,
	level_name,
	title_name

FROM
	user LEFT JOIN department
	ON user.department_id = department.id
	LEFT JOIN role
	ON user.role_id = role.id
	LEFT JOIN registration_level
	on user.registration_level_id = registration_level.id
	LEFT JOIN title
	on user.title_id = title.id
WHERE user.role_id != 0 and title_name like CONCAT('%',#{attribute},'%')
</select>
  <select id="queryByDepartment" parameterType="java.lang.String" resultMap="Users">
SELECT
    USER.id as userId,
    title.id as titleId,
    department.id as departmentId,
    registration_level.id as levelId,
    role.id as roleID,
	name,
	login_name,
	password,
	department_name,
	role_name,
	level_name,
	title_name

FROM
	user LEFT JOIN department
	ON user.department_id = department.id
	LEFT JOIN role
	ON user.role_id = role.id
	LEFT JOIN registration_level
	on user.registration_level_id = registration_level.id
	LEFT JOIN title
	on user.title_id = title.id
WHERE user.role_id != 0 and department_name like CONCAT('%',#{attribute},'%')
</select>
  <select id="queryByName" parameterType="java.lang.String" resultMap="Users">
SELECT
    USER.id as userId,
    title.id as titleId,
    department.id as departmentId,
    registration_level.id as levelId,
    role.id as roleID,
	name,
	login_name,
	password,
	department_name,
	role_name,
	level_name,
	title_name

FROM
	user LEFT JOIN department
	ON user.department_id = department.id
	LEFT JOIN role
	ON user.role_id = role.id
	LEFT JOIN registration_level
	on user.registration_level_id = registration_level.id
	LEFT JOIN title
	on user.title_id = title.id
WHERE user.role_id != 0 and name like CONCAT('%',#{attribute},'%')
</select>
  <select id="queryByLoginName" parameterType="java.lang.String" resultMap="Users">
SELECT
    USER.id as userId,
    title.id as titleId,
    department.id as departmentId,
    registration_level.id as levelId,
    role.id as roleID,
	name,
	login_name,
	password,
	department_name,
	role_name,
	level_name,
	title_name

FROM
	user LEFT JOIN department
	ON user.department_id = department.id
	LEFT JOIN role
	ON user.role_id = role.id
	LEFT JOIN registration_level
	on user.registration_level_id = registration_level.id
	LEFT JOIN title
	on user.title_id = title.id
WHERE user.role_id != 0 and login_name like CONCAT('%',#{attribute},'%')
</select>
  <select id="queryByReLevel" parameterType="java.lang.String" resultMap="Users">
SELECT
    USER.id as userId,
    title.id as titleId,
    department.id as departmentId,
    registration_level.id as levelId,
    role.id as roleID,
	name,
	login_name,
	password,
	department_name,
	role_name,
	level_name,
	title_name

FROM
	user LEFT JOIN department
	ON user.department_id = department.id
	LEFT JOIN role
	ON user.role_id = role.id
	LEFT JOIN registration_level
	on user.registration_level_id = registration_level.id
	LEFT JOIN title
	on user.title_id = title.id
WHERE user.role_id != 0 and level_name like CONCAT('%',#{attribute},'%')
</select>
  <select id="selectWithName" resultMap="Users">
SELECT
    USER.id as userId,
    title.id as titleId,
    department.id as departmentId,
    registration_level.id as levelId,
    role.id as roleID,
	name,
	login_name,
	password,
	department_name,
	role_name,
	level_name,
	title_name

FROM
	user LEFT JOIN department
	ON user.department_id = department.id
	LEFT JOIN role
	ON user.role_id = role.id
	LEFT JOIN registration_level
	on user.registration_level_id = registration_level.id
	LEFT JOIN title
	on user.title_id = title.id
WHERE user.role_id != 0
</select>
  <resultMap id="Users" type="neu.his.bean.User">
    <id property="id" column="userId"/>
    <result property="titleId" column="titleId"/>
    <result property="departmentId" column="departmentId"/>
    <result property="registrationLevelId" column="levelId"/>
    <result property="roleId" column="roleId"/>
    <result property="name" column="name"/>
    <result property="loginName" column="login_name"/>
    <result property="password" column="password"/>
    <result property="departmentname" column="department_name"/>
    <result property="rolename" column="role_name"/>
    <result property="registrationLevelname" column="level_name"/>
    <result property="titlename" column="title_name"/>
  </resultMap>
  <insert id="insertUser" parameterType="neu.his.bean.User">
    INSERT  INTO User (role_id,department_id,name,login_name,password,title_id,registration_level_id)
    SELECT role.id,department.id,#{name},#{loginName},#{password},title.id,registration_level.id
    FROM role,department,title,registration_level
    WHERE role.role_name = #{rolename} and department_name = #{departmentname} and title.title_name = #{titlename} and registration_level.level_name = #{registrationLevelname}
  </insert>

  <update id="updateUser" parameterType="neu.his.bean.User">
  UPDATE user
  SET role_id=
  (SELECT role.id
  FROM role
  WHERE role_name = #{rolename}),

  department_id =
  (SELECT department.id
  FROM department
  WHERE department_name = #{departmentname}),

  name = #{name},

  login_name = #{loginName},

  password = #{password},

  title_id =
  (SELECT title.id
  FROM title
  WHERE title_name = #{titlename}),

  registration_level_id =
  (SELECT registration_level.id
  FROM registration_level
  WHERE level_name = #{registrationLevelname})
  where user.id = #{id}
  </update>

  <resultMap id="BaseResultMap" type="neu.his.bean.User" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="role_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="department_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="login_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="password" jdbcType="CHAR" javaType="java.lang.String" />
      <arg column="title_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="registration_level_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, role_id, department_id, name, login_name, password, title_id, registration_level_id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="neu.his.bean.UserExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="neu.his.bean.UserExample" >
    delete from user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insertSelective" parameterType="neu.his.bean.User" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="BEFORE" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      id,
      <if test="roleId != null" >
        role_id,
      </if>
      <if test="departmentId != null" >
        department_id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="loginName != null" >
        login_name,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="titleId != null" >
        title_id,
      </if>
      <if test="registrationLevelId != null" >
        registration_level_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{id,jdbcType=INTEGER},
      <if test="roleId != null" >
        #{roleId,jdbcType=INTEGER},
      </if>
      <if test="departmentId != null" >
        #{departmentId,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="loginName != null" >
        #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=CHAR},
      </if>
      <if test="titleId != null" >
        #{titleId,jdbcType=INTEGER},
      </if>
      <if test="registrationLevelId != null" >
        #{registrationLevelId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="neu.his.bean.UserExample" resultType="java.lang.Integer" >
    select count(*) from user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update user
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.roleId != null" >
        role_id = #{record.roleId,jdbcType=INTEGER},
      </if>
      <if test="record.departmentId != null" >
        department_id = #{record.departmentId,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.loginName != null" >
        login_name = #{record.loginName,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null" >
        password = #{record.password,jdbcType=CHAR},
      </if>
      <if test="record.titleId != null" >
        title_id = #{record.titleId,jdbcType=INTEGER},
      </if>
      <if test="record.registrationLevelId != null" >
        registration_level_id = #{record.registrationLevelId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update user
    set id = #{record.id,jdbcType=INTEGER},
      role_id = #{record.roleId,jdbcType=INTEGER},
      department_id = #{record.departmentId,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      login_name = #{record.loginName,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=CHAR},
      title_id = #{record.titleId,jdbcType=INTEGER},
      registration_level_id = #{record.registrationLevelId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="neu.his.bean.User" >
    update user
    <set >
      <if test="roleId != null" >
        role_id = #{roleId,jdbcType=INTEGER},
      </if>
      <if test="departmentId != null" >
        department_id = #{departmentId,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="loginName != null" >
        login_name = #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=CHAR},
      </if>
      <if test="titleId != null" >
        title_id = #{titleId,jdbcType=INTEGER},
      </if>
      <if test="registrationLevelId != null" >
        registration_level_id = #{registrationLevelId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>