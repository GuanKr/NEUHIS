<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        https://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!-- 对package包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
    <context:component-scan base-package="neu.his"/>
    <mvc:annotation-driven conversion-service="dateConverter" />
    <!--validator="validator"-->
    <!-- 静态资源访问 -->
    <!--如果webapp下你新建了文件夹，想访问里面的静态资源，那么就要在这配置一下-->
    <mvc:resources location="/static/images/" mapping="/images/**"/>
    <mvc:resources location="/static/css/" mapping="/css/**"/>
<!--    <mvc:resources location="/static/styles/" mapping="/styles/**"/>-->
    <mvc:resources location="/static/js/" mapping="/js/**"/>
<!--    <mvc:resources location="/static/html/" mapping="/html/**"/>-->


    <!--    拦截器-->

        <!--  <bean class="cn.lzc.interceptor.CustomInterceptor"></bean>--><!--拦截所有请求-->

        <!-- <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/" /><&lt;!&ndash;配置了mapping 这个 将不再起作用&ndash;&gt;
            <bean class="cn.lzc.interceptor.CustomInterceptor"></bean>
        </mvc:interceptor>-->

        <!--<mvc:interceptor>-->
        <!--<mvc:mapping path="/hello" />&lt;!&ndash;配置拦截hello结尾的&ndash;&gt;-->
        <!--<bean class="cn.lzc.interceptor.CustomInterceptor"/>-->
        <!--</mvc:interceptor>-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="neu.his.interceptor.LoginInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>


    <!-- 配置视图解析器，把控制器的逻辑视频映射为真正的视图 -->
    <!-- /WEB-INF/jsp/start.jsp -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
    </bean>

<!--    &lt;!&ndash; 校验器 &ndash;&gt;
    <bean id="validator"
          class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        &lt;!&ndash; hibernate校验器 &ndash;&gt;
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
        &lt;!&ndash; 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下的ValidationMessages.properties &ndash;&gt;
        <property name="validationMessageSource" ref="messageSource" />
    </bean>

    &lt;!&ndash; 校验错误信息配置文件 &ndash;&gt;
    <bean id="messageSource"
          class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        &lt;!&ndash; 资源文件名 &ndash;&gt;
        <property name="basenames">
            <list>
                <value>classpath:ContributorValidationMessages</value>
            </list>
        </property>
        &lt;!&ndash; 资源文件编码格式 &ndash;&gt;
        <property name="fileEncodings" value="utf-8" />
        &lt;!&ndash; 对资源文件内容缓存时间，单位秒 &ndash;&gt;
        <property name="cacheSeconds" value="120" />
    </bean>-->
<!--    <bean class="com.neusoft.ssm.handler.ExceptionHandler"/>-->
    <bean id="dateConverter" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <list>
                <bean class="neu.his.converter.DateConverter"/>
            </list>
        </property>
    </bean>
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize">
            <value>10000000</value>
        </property>
    </bean>

    <!-- 配置dbcp数据库连接池 -->
    <!--数据库配置 -->
    <bean id = "propertyConfigurer" class = "org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:db.properties</value>
            </list>
        </property>
    </bean>

    <!-- 数据库连接池 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
        <property name="initialSize" value="1"/>
        <property name="maxActive" value="100"/>
        <property name="maxIdle" value="5"/>
        <property name="maxWait" value="80000"/>
    </bean>
    <!-- 配置会话工厂SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
<!--        <property name="typeAliasesPackage" value="edu.neu.medical.hospital.bean" />-->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <value>
                            helperDialect=mysql
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!-- 在spring容器中配置mapper的扫描器产生的动态代理对象在spring的容器中自动注册，bean的id就是mapper类名（首字母小写）-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 指定扫描包的路径，就是mapper接口的路径，多个包中间以 半角逗号隔开   -->
        <property name="basePackage" value="neu.his.dao"/>
        <!-- 配置sqlSessionFactoryBeanName -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 配置事务管理器 -->
<!--    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
<!--        <property name="dataSource" ref="dataSource" />-->
<!--    </bean>-->

    <!-- 拦截器 -->
<!--    <mvc:interceptors>-->
<!--        &lt;!&ndash; 国际化操作拦截器 如果采用基于（请求/Session/Cookie）则必需配置 &ndash;&gt;-->
<!--        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />-->
<!--    </mvc:interceptors>-->
</beans>